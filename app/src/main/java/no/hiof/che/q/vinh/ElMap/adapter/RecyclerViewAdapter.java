package no.hiof.che.q.vinh.ElMap.adapter;import android.content.Context;import android.support.annotation.NonNull;import android.support.constraint.ConstraintLayout;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.maps.model.Marker;import java.util.ArrayList;import java.util.List;import no.hiof.che.q.vinh.ElMap.R;public class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerViewAdapter.MyViewHolder> {    private String TAG = "RecyclerviewAdapter";    private ArrayList<String> mCityNames = new ArrayList();    private Context mContext;    //Constructors    public RecyclerViewAdapter(ArrayList<String> mCityNames, Context mContext) {        this.mCityNames = mCityNames;        this.mContext = mContext;    }    public RecyclerViewAdapter(Context mContext) {        this.mContext = mContext;    }    // Provide a reference to the views for each data item    // Complex data items may need more than one view per item, and    // you provide access to all the views for a data item in a view holder    public class MyViewHolder extends RecyclerView.ViewHolder {        // each data item is just a string in this case        TextView mTextView;        ConstraintLayout parentLayout;        public MyViewHolder(View itemView) {            super(itemView);            mTextView = itemView.findViewById(R.id.cityname);            parentLayout = itemView.findViewById(R.id.parent_layout);        }    }    // Provide a suitable constructor (depends on the kind of dataset)    public RecyclerViewAdapter(ArrayList<String> myDataset) {        mCityNames = myDataset;    }    // Create new views (invoked by the layout manager)    @Override    public RecyclerViewAdapter.MyViewHolder onCreateViewHolder(ViewGroup parent,                                                     int viewType) {        // create a new view        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_listitem, parent, false);        MyViewHolder vh = new MyViewHolder(v);        return vh;    }    // Replace the contents of a view (invoked by the layout manager)    @Override    public void onBindViewHolder(MyViewHolder holder, final int position) {        // - get element from your dataset at this position        // - replace the contents of the view with that element        Log.d(TAG, "onBindViewHolder: ");        holder.mTextView.setText(mCityNames.get(position));        holder.parentLayout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Log.d(TAG, "onClick: " + mCityNames.get(position));                Toast.makeText(mContext, mCityNames.get(position), Toast.LENGTH_SHORT).show();            }        });    }    // Return the size of your dataset (invoked by the layout manager)    @Override    public int getItemCount() {        return mCityNames.size();    }    public void setmCityNames(ArrayList<String> cityNames) {        this.mCityNames = cityNames;        notifyDataSetChanged();    }}